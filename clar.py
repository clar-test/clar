#!/usr/bin/env python

from __future__ import with_statement
from string import Template
import re, fnmatch, os

VERSION = "0.10.0"

TEST_FUNC_REGEX = r"^(void\s+(test_%s__(\w+))\(\s*void\s*\))\s*\{"

EVENT_CB_REGEX = re.compile(
    r"^(void\s+clar_on_(\w+)\(\s*void\s*\))\s*\{",
    re.MULTILINE)

SKIP_COMMENTS_REGEX = re.compile(
    r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
    re.DOTALL | re.MULTILINE)

CATEGORY_REGEX = re.compile(r"CL_IN_CATEGORY\(\s*\"([^\"]+)\"\s*\)")

CLAR_HEADER = """
/*
 * Clar v%s
 *
 * This is an autogenerated file. Do not modify.
 * To add new unit tests or suites, regenerate the whole
 * file with `./clar`
 */
""" % VERSION

CLAR_EVENTS = [
    'init',
    'shutdown',
    'test',
    'suite'
]

def main():
    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-c', '--clar-path', dest='clar_path')
    parser.add_option('-v', '--report-to', dest='print_mode', default='default')

    options, args = parser.parse_args()

    for folder in args or ['.']:
        builder = ClarTestBuilder(folder,
            clar_path = options.clar_path,
            print_mode = options.print_mode)

        builder.render()


class ClarTestBuilder:
    def __init__(self, path, clar_path = None, print_mode = 'default'):
        self.declarations = []
        self.suite_names = []
        self.callback_data = {}
        self.suite_data = {}
        self.category_data = {}
        self.event_callbacks = []

        self.clar_path = os.path.abspath(clar_path) if clar_path else None

        self.path = os.path.abspath(path)
        self.modules = [
            "clar_sandbox.c",
            "clar_fixtures.c",
            "clar_fs.c",
            "clar_categorize.c",
        ]

        self.modules.append("clar_print_%s.c" % print_mode)

        print("Loading test suites...")

        for root, dirs, files in os.walk(self.path):
            module_root = root[len(self.path):]
            module_root = [c for c in module_root.split(os.sep) if c]

            tests_in_module = fnmatch.filter(files, "*.c")

            for test_file in tests_in_module:
                full_path = os.path.join(root, test_file)
                test_name = "_".join(module_root + [test_file[:-2]])

                with open(full_path) as f:
                    self._process_test_file(test_name, f.read())

        if not self.suite_data:
            raise RuntimeError(
                'No tests found under "%s"' % path)

    def render(self):
        main_file = os.path.join(self.path, 'clar_main.c')
        with open(main_file, "w") as out:
            out.write(self._render_main())

        header_file = os.path.join(self.path, 'clar.h')
        with open(header_file, "w") as out:
            out.write(self._render_header())

        print ('Written Clar suite to "%s"' % self.path)

    #####################################################
    # Internal methods
    #####################################################

    def _render_cb(self, cb):
        return '{"%s", &%s}' % (cb['short_name'], cb['symbol'])

    def _render_suite(self, suite, index):
        template = Template(
r"""
    {
        ${suite_index},
        "${clean_name}",
        ${initialize},
        ${cleanup},
        ${categories},
        ${cb_ptr}, ${cb_count}
    }
""")

        callbacks = {}
        for cb in ['initialize', 'cleanup']:
            callbacks[cb] = (self._render_cb(suite[cb])
                if suite[cb] else "{NULL, NULL}")

        if len(self.category_data[suite['name']]) > 0:
            cats = "_clar_cat_%s" % suite['name']
        else:
            cats = "NULL"

        return template.substitute(
            suite_index = index,
            clean_name = suite['name'].replace("_", "::"),
            initialize = callbacks['initialize'],
            cleanup = callbacks['cleanup'],
            categories = cats,
            cb_ptr = "_clar_cb_%s" % suite['name'],
            cb_count = suite['cb_count']
        ).strip()

    def _render_callbacks(self, suite_name, callbacks):
        template = Template(
r"""
static const struct clar_func _clar_cb_${suite_name}[] = {
    ${callbacks}
};
""")
        callbacks = [
            self._render_cb(cb)
            for cb in callbacks
            if cb['short_name'] not in ('initialize', 'cleanup')
        ]

        return template.substitute(
            suite_name = suite_name,
            callbacks = ",\n\t".join(callbacks)
        ).strip()

    def _render_categories(self, suite_name, categories):
        template = Template(
r"""
static const char *_clar_cat_${suite_name}[] = { "${categories}", NULL };
""")
        if len(categories) > 0:
            return template.substitute(
                suite_name = suite_name,
                categories = '","'.join(categories)
                ).strip()
        else:
            return ""

    def _render_event_overrides(self):
        overrides = []
        for event in CLAR_EVENTS:
            if event in self.event_callbacks:
                continue

            overrides.append(
                "#define clar_on_%s() /* nop */" % event
            )

        return '\n'.join(overrides)

    def _render_header(self):
        template = Template(self._load_file('clar.h'))

        declarations = "\n".join(
            "extern %s;" % decl
            for decl in sorted(self.declarations)
        )

        return template.substitute(
            extern_declarations = declarations,
        )

    def _render_main(self):
        template = Template(self._load_file('clar.c'))
        suite_names = sorted(self.suite_names)

        suite_data = [
            self._render_suite(self.suite_data[s], i)
            for i, s in enumerate(suite_names)
        ]

        callbacks = [
            self._render_callbacks(s, self.callback_data[s])
            for s in suite_names
        ]

        callback_count = sum(
            len(cbs) for cbs in self.callback_data.values()
        )

        categories = [
            self._render_categories(s, self.category_data[s])
            for s in suite_names
        ]

        return template.substitute(
            clar_modules = self._get_modules(),
            clar_callbacks = "\n".join(callbacks),
            clar_categories = "".join(categories),
            clar_suites = ",\n\t".join(suite_data),
            clar_suite_count = len(suite_data),
            clar_callback_count = callback_count,
            clar_event_overrides = self._render_event_overrides(),
        )

    def _load_file(self, filename):
        if self.clar_path:
            filename = os.path.join(self.clar_path, filename)
            with open(filename) as cfile:
                return cfile.read()

        else:
            import zlib, base64, sys
            content = CLAR_FILES[filename]

            if sys.version_info >= (3, 0):
                content = bytearray(content, 'utf_8')
                content = base64.b64decode(content)
                content = zlib.decompress(content)
                return str(content, 'utf-8')
            else:
                content = base64.b64decode(content)
                return zlib.decompress(content)

    def _get_modules(self):
        return "\n".join(self._load_file(f) for f in self.modules)

    def _skip_comments(self, text):
        def _replacer(match):
            s = match.group(0)
            return "" if s.startswith('/') else s

        return re.sub(SKIP_COMMENTS_REGEX, _replacer, text)

    def _process_test_file(self, suite_name, contents):
        contents = self._skip_comments(contents)

        self._process_events(contents)
        self._process_declarations(suite_name, contents)
        self._process_categories(suite_name, contents)

    def _process_events(self, contents):
        for (decl, event) in EVENT_CB_REGEX.findall(contents):
            if event not in CLAR_EVENTS:
                continue

            self.declarations.append(decl)
            self.event_callbacks.append(event)

    def _process_declarations(self, suite_name, contents):
        callbacks = []
        initialize = cleanup = None

        regex_string = TEST_FUNC_REGEX % suite_name
        regex = re.compile(regex_string, re.MULTILINE)

        for (declaration, symbol, short_name) in regex.findall(contents):
            data = {
                "short_name" : short_name,
                "declaration" : declaration,
                "symbol" : symbol
            }

            if short_name == 'initialize':
                initialize = data
            elif short_name == 'cleanup':
                cleanup = data
            else:
                callbacks.append(data)

        if not callbacks:
            return

        tests_in_suite = len(callbacks)

        suite = {
            "name" : suite_name,
            "initialize" : initialize,
            "cleanup" : cleanup,
            "cb_count" : tests_in_suite
        }

        if initialize:
            self.declarations.append(initialize['declaration'])

        if cleanup:
            self.declarations.append(cleanup['declaration'])

        self.declarations += [
            callback['declaration']
            for callback in callbacks
        ]

        callbacks.sort(key=lambda x: x['short_name'])
        self.callback_data[suite_name] = callbacks
        self.suite_data[suite_name] = suite
        self.suite_names.append(suite_name)

        print("  %s (%d tests)" % (suite_name, tests_in_suite))

    def _process_categories(self, suite_name, contents):
        self.category_data[suite_name] = [
            cat for cat in CATEGORY_REGEX.findall(contents) ]


CLAR_FILES = {
"clar.c" : r"""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""",
"clar_print_default.c" : r"""eJyFU8Fu2zAMPdtfwQUwIgVuenew9tZTsMuwU1sYqiW3AhzJkOhswNB/n0Q5rRws6Ukmxff4RD6XHgXqDo5WS+gG4drRaYOtNhpZ+ABUHtvOTgZriLGfNKpTorPGI3RvwsEmXRhxUJ6Xf8uCRUr+Cd+VBVH3bLW3QioJlUxsvoHKP5lVDbEjX3TIWTOGnygcKhlAIftelhde4d8mlPa3+folMaGcsy4lLr0gpTLkRy4D78pPoU8maSxIlVOjddhSrWdXpVMN6TbT4TRpj27qMJVRAWzoILmnlhAGy+FB6GFyqqG5Bgqeq6p801QeWOU5PIagks/weIPhiOVlURDrzR09NIvjLGK4Mhak8p3TI2q7gPR6yBGDNmF90+FFuTOeObvQBScjzHVpqAf/SlW6BzZfZM3h23f48Wu/54H+Ek9Wzpfbue4fa6JSlts8SQ9+TJ7JXpISfZi7kuf+iYDdMkOYzNJVF/QmNNzD+mENDay36y/00YbY///D3ObaSPWHVN1uwFg7wuZ2aWeqOLN4kn2tv3gJhl70D9uqYbvdUrOjaAcdroR7HXcU+vjnshjXkBZbHPt5Bh5lWBjla4LwhFFGsjl8L/8BsUiTTQ==""",
"clar_print_tap.c" : r"""eJyNVE1vnDAQPcOvmGWFBAiQot6yaqr2HFU9tLdKyAGzscLayDbbVlX+e8cDJPbuJtsTzPObmTcfdmwss6KFoxIdtAPTzaiFtI2Qwmb4A5Yb27RqkrYEZ5tJWL4CrZLGQvvINBTzgWQHbvL4bxxlLmT+6r5bIY94gq08ktBnyffP3+DItRFKws2HnzLJd/FzHL8h2TxOtlO/5HXZDuBaKz0D/yM3xDznXRxHoodsEwSMXmrYwsiM4R2wYYC0I2GZybGY0hOJhUV8MDxw7JkY0BGd2EHJ/am3l7BEvyiMtoa5qeu0O8/2dhspLPVQTod1xMbqqbUzjQhQ0MdrHbJdL9a8AFVVzSPzMJy5YXsOt5Ca1yKqu7mWg9mHdMNx/ML+uaVenEWj0QCcRSM8pLri4QLV4SGzx6ZfYjo8ZA5CrszOZzq8wXY8cJ2v67Ecddy0WozWbfTmI3z9cX/vLwuARzgV4B3lYafrur52OZSk1fEvLO2Du4bzhZhNUj0D8/rRhNdUqXFLWC3CUPiyop8gkcqCekqwGQl+3Jkf8MXEdHFE8kmc5qPSy86Z7EoFNNbs8pvj33IhO/470L2FoihQNWTbtMudQY313X3X92WwB5QcyMC9Ld0QKOeRNYPAI6b3445MjIQOzi5hWfF+UWbwxZrwRUq+YCMBfzdAO348JVAKFyKfY3LZZYv5HP8D5Mbj9w==""",
"clar_sandbox.c" : r"""eJydVWtP4kAU/dz+iism0gpKfWQ3G9YPm+gasioEMJgomdR2KhPplMwM7KLxv++dTqEP0DVrTKjcO+eec+6cKpWvWADBxBdAgqkvyMxXk/tT79uXcdu2pSkzrmwmycKfspCoeJY2OUHCpTJH9/UXrv1qW4PhjyEZglR42mIROBrC0eUm7Enlws4ZeK5tWYKqueDgrfp2BqQzOO/08cChVCROQupW+7Jnxw8CKmWGOiLdXy6cadi2/VbiHDFe5JsyfZxHERVNkOyFEgVTyp8M9V0W8ZBGQEadm5Nj28pwjMqse4EGBcmcKziD03alx+BTvkCjhLwfYw8aYtWG1z3UVWuCfko/Lszn7eCi3+t3f3auLmo2WG8oEaxsEtN6o0SAwxDHawOD7/n4NjQazE3hK7Ox+YkqfHDWRNgYjbGMyfilNlWfUozPqZ6SVjbXq1vNCJQpeDBbOivvsNRcOaehC0uyrDcbf22rtQ+dCNSE6m4mEh5TtC1MqOR19NNfgs+XasL4UxOUWIJKYC4ptHA+7Lfsd0jVdL2W8arSMsUSswIxJLVLp5Ia6EuqhjSe9TSocz7q9s9dc6wJBq5y+XYpD1lkdA0nTIJcSkXjtaApe6YooKRFiw/mQqTCmaCBSrD4gbjDd5UdfiRr9efBUTEAi4SFkEZ6zqXPw8fkj6O/S2OqCRTy7o11gOoPXj1XjVcDI1FMRDBBFcgSaRYMiSQRcQGsmkL0k01DklEwStc8CrdXF4jy2TRNTi3F09bcpT81nbZ1ZFcvjXLAcw4m3klUpOVigIpvHu2WbSEYTkO/8aEsoqr+FXD1PBExLu2FpnT1onvdQecOMKm/fRGCnPpyQmW65EKUrY0oaxF5iKv7YNk+HtJ9WFalBPVWfR219SIqGFrZARyN9RsX+82gcr3RyMH0PVpdu7wLGpppM1/ONmdxDDZllgF6xjgNHUKuOzeXo5NjQtyMXPyMkZmVjqLMm9urq4296P74Wd+34la9r5638S9EH8BkF0enKytPJfKf92ML7v8QWb1i8NQn5a5XmOe6HKEU4fMhhr29banbngCNYpJdJLrVixK9v7GvgW8=""",
"clar_fixtures.c" : r"""eJyFUV1LwzAUfW5+xZU9rLUVJ4ggZQ9DFAUfZEwQSglZmrBAl5Qkk6n43236tWbKfMvNOfecc+81llhBgSppLNAN0XCOuNjbnWa4InYTjpE1MSzxuD1Vki2L0BcKTKfn0EYgu57d3uRpjYhPhi1opSwumUwRCvo3zMFYXT9C5xA5stWSVh9hI5FAa+wUFG//osgJCA5tmQ1SF3CVw9kcppfTCAWBj8ZxDg3UN4/zZ7MaHBrHSBw7vpcJ4mGS5Ijtai9qnannNqk1q7myXU+KvhGaCF4wDnfPiyV+eHpbvS7v8cti9YjGq6Yl7lzCkxfo1L0j/lJOwOtrUrwrUcDBBRsii7Xan3bjBlNVL2WUzuMkgGlJdLuIP21oyYjcVf/a6G3ozXTQPRqmsZkwWQiOfgAVGffP""",
"clar_fs.c" : r"""eJylVdtu20YQfSa/YkAD8TKWY8dJX6L0wXDEVqgsBhINN7UFhiGX1qIkl9hd+dLG/57ZCynJUWEkfZE0s7NnZufMGe2xsqAlpJfj6ZsT399DgzUUojhKo8npb3Mg+ud8PBlNE/hq/NP4LJ5G49n5aTKOp71zNJvFs4vx06DzPz6MZ6HvS5UplkO+zAS89EtWUd7KtM3UkuS8kcqdGE/o/+t71tYm/ArTi8lk6HuS/UNTBRVtbtRyAGzo+x4rgaQ2zMaFvucJqlaicdd8z15AHKkE/rbxIQI6+DqrKp4TF3YAJ2GH/AxwTeu8fTBRA0jtl0Xp0K+sucAsx9suzPPauX2v5AIIMxYweO9AhnBwwELAbvTFXLGFrmf/aF+X4/Uu2L++3scEjwjmitRnQ/+x7/0tZ0XXecIaBTUv6AC22i/5SuRPnQWVynAy/z3CSYg/zpPZxVkCJQLp4m2YvYqVbJHrEHU7bJgG+y7IZNBQf1HBz2nNxQN5oeEHoDnnJdlOHYa2aa18dRetmlxziI8ZOl8bCV5ruk3u3ptw9OlUnaeMquxGorOfd/OcKs2kpEKlBFuMibHUuKUCm8gbW1aoOTge4HFwyZqC30l4EgdlhmYR+J4tVVBK1q0wpnv0U4JkKmqygxTDQEdfFKcfRpNRMsKx6zgzM7oLL+c4oz9A80aSs/jjp40U6bpmA46t0vgVzZpVS7TLApg3lOwe55A6ivMqE04hwcsgtCB7tJK0KxdH0pdLWlUpXylii3IVZuLm9mphsPXg6gsrqeXECtwH+Kl7jF96sLj4m6z1i773cGw1VLYCb5dEqoIKodnzgvmDVLQGtLl4B5/t7c+Q40ZwFL66bgLNmUfvmSKHr0Onsg5eT4LFp/c0vyWm1uPFwBTdBd9lTGGwvjCAF7b+Ad4b9mq9HP05TubJaXIxJ/b8f3DZU2lNU9Ivi+G2VNcL1dopLh3dt17IuC0LpHVDwuvA9TLtT21LrHm1EXlo9ly/s/4rwC5C1z00g6MvrDnK22DovCYoOJz1jpPFpsaN6412udkJndTNwdtF/zdiFF6vpMJxlNKIfD12hjQj7MiwD4qD7jkovbfcSEvtlVlTfOH3uxX+rKg3NL3B0dvFrh6I+rselNtN6F68oxk/+2araVBLuv3SZ6RvZL5q3BVi9r52bTgeUfZNwUr/G9kaoSs=""",
"clar_categorize.c" : r"""eJydVd9P2zAQfk7+iqMTVX6B4LkLUsXYXqpNQvAwMRS5qbtZCklnO9MY2v++8zkJbkhS2Eub2L7z93333eXdhm9FyeFytbzOLpc3V5++XH/NPlx9XN6ubmCGu6wu9Mz39eOO4xsoLetcw5Pv5VWpNOQ/mIQoKtkDVwvfEyUuVXWpm2dWFFW+8P9CXjCZ5Uzz75V8zAqh8ISvNNMiH9iDzF0Tf3jGS7Yu+OY5iG7aCxQlxQYD6SLzm4ALGQ+E/pNFKRDttpIQCEjhbAEC3oOJOLmwXCCOReh7nthCgALkTPH8YRdgiqQ5R/zvxH0IKWYwZz3JdS1LOMfczeMZCtHh/1WJTY8A22wyXf0XCQQ2LEYTg+cMKAsERaQIhyJcpA0TqlhoCuw5CxCncI7420Xii2JJTtuBs5q4iSACheWrtoELOwwxE0rhJrtz0MTxPeZG0AcEs6YIeorQHskyLu98zGCklc3wqsszpBkYipkGVQvNM2LQlqlpF4qkbYjoTxG+Js7Yb6+biHkffkN2sFNDc7zvYAcOLsSxMQCdwZR4yuJAz562KmAHG/Ywn5OO9GLDhqGQ/VyVXvYktQlRIwUj1gpjX9ckQ9MeJ+D0FkvWhwqwk3hfW7c9E+wkTrXfbnv73k9VSR2Mlf20se7ovq0qSjFk5+Ql68GKTGfvxgwR2wazY3WsvpWzBCyfCXTd+JmuhlDWhD3Rxkxqe8g1pspZNz2OptkYIm80MGWlm3EOdJ58nlsj8974c6KfDzSModR2g3vtAogtHKXw+Xa1WoB5s90wPm0nYFC2sPdl2P80/AP2l4xl""",
"clar.h" : r"""eJy9VV1vmzAUfS6/wg17gAi1TR+7tlIUJWukqJvaVNueLGNMsQaG2mbNNO2/7xpICF/Juoe+JOZe33uOOecam4ciYCHCeLaaPuD1/HGN7zC2bAhywTpxy+aCxnnA0LXSQcz9s+jWsn6mPEA0JhJjohST2rFOuNCIpiLgmqfCs05grSASEYnGIY+ZV26JAaWVZVKmshULmKKSZ1UvU6iiNI8DTPxUavdjDwfMXnISY+Xs9/GGH6BpJwCNh/pyxxT0FfV12bbBimlMY0ZEnjlFzBlXj275PHY9VC7SjLzkrKaAQ9UoNW1tHhr5CpEWy2/rp4c5/jJd31n7HEwp3+hcMqepQhHDgiQNlCqsiAj8dPOWki27AyU2A0uE1s5gsxVe3uPZdD3/9PnhuwML17LOx2MLjdG0eN8gOUoIlalCr1xHiG2ymFOuUeETlDClyDOD/ee7pkApyZXGGSiGHSiQHjIOcpsmLTIuur1BFx44fbFczTE2q9XyvliNFrmgBQFK4hiFBHwbXKERsuueHpq4HWCz8zjw9SDufJMxqlmAwgYBnRYcjjCobHoU/nT43IAv4b0aYK6QSDXSMmd9uFutZhGjP/5DJ2rq3kmoC7eL/M5K9VF4B6Eujg2VSP9xnCpKfRN2/7Ra9Y9Cq2j/nXeKqqPvKppuLrcPm+7YOWq71QhdC3ZI1V5plx08S7GlXdF7kkUqqTERdIPL8vyVSMHFc5t9QaDHJ0PuWDO4hsthOBv1XxYV0lu6fi1LUJBL86cNCNswmhtXXY16PLf+lcHhSMt57dO1Pttq4qnLJqVdDpKu50Da2zHcERw96oJXwlVCNI2KYVAT+IU5MsvLgQtz912feLwfmDuQBGDeC2zzGoQfBvEdf+L5QyCnp5B2PfPXD+TXQP5hoMzJJl52uTdJDkRcdHODHAjvSWRUTJiO0gD0M7SIkaoU6cNvttFMCryf+WNtP+Z/AaQwXp0="""
}
if __name__ == '__main__':
    main()
